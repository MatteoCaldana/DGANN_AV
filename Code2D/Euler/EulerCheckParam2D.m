% Checking parameters set for problem

% model
assert(exist('model','var')==1,...
    'ERROR: ''model'' variable must be defined')
assert(strcmp(model,'Euler'),...
    'ERROR: ''model'' must be set to ''Euler''')

% gas_const
assert(exist('gas_const','var')==1,...
    'ERROR: ''gas_const'' variable must be defined')
assert((isnumeric(gas_const) & gas_const > 0.0),...
    'ERROR: ''gas_const'' must be a positive number')

% gas_gamma
assert(exist('gas_gamma','var')==1,...
    'ERROR: ''gas_gamma'' variable must be defined')
assert((isnumeric(gas_gamma) & gas_gamma > 0.0),...
    'ERROR: ''gas_gamma'' must be a positive number')

% test_name
assert(exist('test_name','var')==1,...
    'ERROR: ''test_name'' variable must be defined')

% N
assert(exist('N','var')==1,...
    'ERROR: ''N'' variable must be defined')
assert((floor(N)==N & N >= 0),...
    'ERROR: ''N'' must be a non-negative integer')

% IC
assert(exist('InitialCond','var')==1,...
    'ERROR: ''InitialCond'' variable must be defined')

% Boundary Flags
assert(exist('BC_flags','var')==1,...
    'ERROR: ''BC_flags'' variable must be defined to set boundary conditions')
num_pfaces = length(find(not(BC_flags(:,2)-Periodic)));
assert(mod(num_pfaces,2)==0,...
    'ERROR: the number of periodic face tags should be a multiple of 2')
if(num_pfaces > 0)
    UseMeshPerData = true;
else
    UseMeshPerData = false;
end

% FinalTime
assert(exist('FinalTime','var')==1,...
    'ERROR: ''FinalTime'' variable must be defined')
assert((isnumeric(FinalTime) & FinalTime >= 0.0),...
    'ERROR: ''FinalTime'' must be a non-negative number')

% Indicator and Limiter
assert(exist('Limiter','var')==1,...
    'ERROR: ''Limiter'' variable must be defined')
if(strcmp(Limiter,'NONE'))
    
elseif(strcmp(Limiter,'BJES') || strcmp(Limiter,'VENK'))
    
    assert(exist('Indicator','var')==1,...
        'ERROR: ''Indicator'' variable must be defined')
    switch Indicator
        
        case 'NONE'
            
        case 'TVB'
            assert(exist('TVBM','var')==1,...
                'ERROR: ''TVBM'' variable must be defined since Indicator = TVB')
            assert((isnumeric(TVBM) & TVBM >= 0.0),...
                'ERROR: ''TVBM'' must be a non-negative number')
            
            assert(exist('TVBnu','var')==1,...
                'ERROR: ''TVBnu'' variable must be defined since Indicator = TVB')
            assert((isnumeric(TVBnu) & TVBnu > 1.0),...
                'ERROR: ''TVBnu'' must be a number greater than 1')
            
        case 'TVB2'
            assert(exist('TVBM','var')==1,...
                'ERROR: ''TVBM'' variable must be defined since Indicator = TVB2')
            assert((isnumeric(TVBM) & TVBM >= 0.0),...
                'ERROR: ''TVBM'' must be a non-negative number')
            
            assert(exist('TVBnu','var')==1,...
                'ERROR: ''TVBnu'' variable must be defined since Indicator = TVB2')
            assert((isnumeric(TVBnu) & TVBnu > 1.0),...
                'ERROR: ''TVBnu'' must be a number greater than 1')
            
        case 'NN'
            
            assert(exist('nn_model','var')==1,...
                'ERROR: ''nn_model'' variable must be defined since Indicator = NN')
            
        case 'NN_Pwise'
            assert(exist('nn_model','var')==1,...
                'ERROR: ''nn_model'' variable must be defined since Indicator = NN_Pwise')
            
        case 'NN_modal_Pwise'
            assert(exist('nn_model','var')==1,...
                'ERROR: ''nn_model'' variable must be defined since Indicator = NN_modal_Pwise')
            
        case 'NN_modal_patch_Pwise'
            assert(exist('nn_model','var')==1,...
                'ERROR: ''nn_model'' variable must be defined since Indicator = NN_modal_patch_Pwise')
            
        otherwise
            error('Unknown indicator type %s',Indicator)
    end
    
    assert(exist('ind_var','var')==1,...
        'ERROR: ''ind_var'' variable must be defined')
    
    assert((strcmp(ind_var,'density')  | ...
        strcmp(ind_var,'velocity') | ...
        strcmp(ind_var,'pressure') | ...
        strcmp(ind_var,'prim')     | ...
        strcmp(ind_var,'con')      | ...
        strcmp(ind_var,'energy')   | ...
        strcmp(ind_var,'de')),...
        ['ERROR: Unknown ''ind_var'' type ', ind_var])
    
    assert(exist('lim_var','var')==1,...
        'ERROR: ''lim_var'' variable must be defined')
    
    assert((strcmp(lim_var,'prim')     | ...
        strcmp(lim_var,'con')),...
        ['ERROR: Unknown ''lim_var'' type ', lim_var])
    
else
    error('Unknown indicator type %s',Indicator)
end

% Mesh file details
assert(exist('mtail','var')==1,...
    'ERROR: ''mtail'' variable must be defined')
assert(exist('msh_file','var')==1,...
    'ERROR: ''msh_file'' variable must be defined')

% Plot saving
assert(exist('Save_plots','var')==1,...
    'ERROR: ''Save_plots'' variable must be defined')
assert(islogical(Save_plots),...
    'ERROR: ''Save_plots'' must be a logical variable')

if(Save_plots)
    assert(exist('Plot_var','var')==1,...
        'ERROR: ''Plot_var'' variable must be defined to save plots')
    assert(iscellstr(Plot_var),...
        'ERROR: ''Plot_var'' variable must be a cell of strings')
    
    for i = 1:length(Plot_var)
        assert((strcmp(Plot_var{i},'density')  | ...
            strcmp(Plot_var{i},'velx')     | ...
            strcmp(Plot_var{i},'vely')     | ...
            strcmp(Plot_var{i},'pressure') | ...
            strcmp(Plot_var{i},'enerfy')),...
            ['ERROR: Unknown variable ', Plot_var{i}, ' in ''Plot_var'''])
    end
    
    assert(exist('xran','var')==1,...
        'ERROR: ''xran'' variable must be defined to save plots')
    assert((isnumeric(xran) & length(xran) == 2),...
        'ERROR: ''xran'' must be a numeric array of length 2')
    
    assert(exist('yran','var')==1,...
        'ERROR: ''yran'' variable must be defined to save plots')
    assert((isnumeric(yran) & length(yran) == 2),...
        'ERROR: ''yran'' must be a numeric array of length 2')
    
    assert(exist('clines','var')==1,...
        'ERROR: ''clines'' variable must be defined to save plots')
    assert((iscell(clines) & length(clines) == length(Plot_var)),...
        'ERROR: ''clines'' must be a numeric cell of size equal to that of Plot_var')
    
    for i = 1:length(clines)
        assert((isnumeric(clines{i}) & length(clines{i}) >= 2),...
            'ERROR: each element of ''clines'' must be an real array of size >= 2')
    end
    
    
end
